#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è webhook –≤–µ—Ä—Å–∏—è –±–æ—Ç–∞
"""

import os
import json
import logging
import requests
from datetime import datetime, timedelta
from typing import Dict, List
from dotenv import load_dotenv
from flask import Flask, request

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler('bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)

def log_user_action(user_id: int, action: str, details: str = ""):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏."""
    logger.info(f"USER_ACTION: user_id={user_id}, action={action}, details={details}")

def log_error(error: Exception, context: str = ""):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞."""
    logger.error(f"ERROR: {context} - {str(error)}", exc_info=True)

class SimpleNewsBot:
    """–ü—Ä–æ—Å—Ç–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –±–æ—Ç –¥–ª—è –Ω–æ–≤–æ—Å—Ç–µ–π."""
    
    def __init__(self):
        self.token = os.getenv('TELEGRAM_BOT_TOKEN')
        self.news_api_key = os.getenv('NEWS_API_KEY')
        self.feedback_form_url = "https://forms.gle/m9AHSMgKHsmG437p9"
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π
        self.categories = {
            'technology': '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏',
            'science': '–Ω–∞—É–∫–∞', 
            'business': '–±–∏–∑–Ω–µ—Å',
            'health': '–∑–¥–æ—Ä–æ–≤—å–µ',
            'sports': '—Å–ø–æ—Ä—Ç',
            'entertainment': '—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è',
            'general': '–æ–±—â–∏–µ'
        }
        
        # –§–∞–π–ª—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        self.favorites_file = 'data/favorites.json'
        self.user_stats_file = 'data/user_stats.json'
        self.subscriptions_file = 'data/subscriptions.json'
        
        # –ö—ç—à –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.last_news_cache = {}
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö
        self._init_data_files()
    
    def _init_data_files(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤ –¥–∞–Ω–Ω—ã—Ö."""
        try:
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é data –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            os.makedirs('data', exist_ok=True)
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
            if not os.path.exists(self.favorites_file):
                with open(self.favorites_file, 'w', encoding='utf-8') as f:
                    json.dump({}, f, ensure_ascii=False, indent=2)
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            if not os.path.exists(self.user_stats_file):
                with open(self.user_stats_file, 'w', encoding='utf-8') as f:
                    json.dump({}, f, ensure_ascii=False, indent=2)
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª –ø–æ–¥–ø–∏—Å–æ–∫
            if not os.path.exists(self.subscriptions_file):
                with open(self.subscriptions_file, 'w', encoding='utf-8') as f:
                    json.dump({}, f, ensure_ascii=False, indent=2)
                    
        except Exception as e:
            log_error(e, "–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤ –¥–∞–Ω–Ω—ã—Ö")
    
    def _load_favorites(self) -> Dict:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π."""
        try:
            with open(self.favorites_file, 'r', encoding='utf-8') as f:
                return json.load(f)
        except Exception as e:
            log_error(e, "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ")
            return {}
    
    def _save_favorites(self, favorites: Dict):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π."""
        try:
            with open(self.favorites_file, 'w', encoding='utf-8') as f:
                json.dump(favorites, f, ensure_ascii=False, indent=2)
        except Exception as e:
            log_error(e, "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ")
    
    def _load_user_stats(self) -> Dict:
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
        try:
            with open(self.user_stats_file, 'r', encoding='utf-8') as f:
                return json.load(f)
        except Exception as e:
            log_error(e, "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
            return {}
    
    def _save_user_stats(self, stats: Dict):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
        try:
            with open(self.user_stats_file, 'w', encoding='utf-8') as f:
                json.dump(stats, f, ensure_ascii=False, indent=2)
        except Exception as e:
            log_error(e, "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    
    def _load_subscriptions(self) -> Dict:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
        try:
            with open(self.subscriptions_file, 'r', encoding='utf-8') as f:
                return json.load(f)
        except Exception as e:
            log_error(e, "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫")
            return {}
    
    def _save_subscriptions(self, subscriptions: Dict):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
        try:
            with open(self.subscriptions_file, 'w', encoding='utf-8') as f:
                json.dump(subscriptions, f, ensure_ascii=False, indent=2)
        except Exception as e:
            log_error(e, "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫")
    
    def _filter_saved_news(self, news_list: List[Dict], user_id: int) -> List[Dict]:
        """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π."""
        try:
            favorites = self._load_favorites()
            user_id_str = str(user_id)
            
            if user_id_str not in favorites:
                return news_list
            
            user_favorites = favorites[user_id_str]
            saved_titles = {news['title'] for news in user_favorites}
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–æ–≤–æ—Å—Ç–∏, –∏—Å–∫–ª—é—á–∞—è —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ
            filtered_news = []
            for news in news_list:
                if news['title'] not in saved_titles:
                    filtered_news.append(news)
            
            logger.info(f"–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ {len(news_list) - len(filtered_news)} —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π")
            return filtered_news
            
        except Exception as e:
            log_error(e, "–û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π")
            return news_list
    
    def _update_user_stats(self, user_id: int):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        try:
            stats = self._load_user_stats()
            user_id_str = str(user_id)
            
            if user_id_str not in stats:
                stats[user_id_str] = {'commands_count': 0, 'last_command': None}
            
            stats[user_id_str]['commands_count'] += 1
            stats[user_id_str]['last_command'] = datetime.now().isoformat()
            
            self._save_user_stats(stats)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ä–º—É –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
            if stats[user_id_str]['commands_count'] == 10:
                self._send_feedback_form(user_id)
                
        except Exception as e:
            log_error(e, "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    
    def _send_feedback_form(self, user_id: int):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏."""
        try:
            feedback_text = f"""
üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –±–æ—Ç–∞ —É–∂–µ 10 —Ä–∞–∑! 

üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –º–Ω–µ–Ω–∏–µ–º –æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞:
{self.feedback_form_url}

–í–∞—à –æ—Ç–∑—ã–≤ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —É–ª—É—á—à–∏—Ç—å –±–æ—Ç–∞! üôè
            """
            self.send_message(user_id, feedback_text)
            log_user_action(user_id, "feedback_form_sent")
        except Exception as e:
            log_error(e, "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏")
    
    def send_message(self, chat_id: int, text: str, parse_mode: str = None, reply_markup: dict = None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
        try:
            url = f"https://api.telegram.org/bot{self.token}/sendMessage"
            
            data = {
                'chat_id': chat_id,
                'text': text
            }
            
            if parse_mode:
                data['parse_mode'] = parse_mode
            
            if reply_markup:
                data['reply_markup'] = json.dumps(reply_markup)
            
            response = requests.post(url, json=data, timeout=10)
            response.raise_for_status()
            
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")
            return True
            
        except Exception as e:
            log_error(e, f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")
            return False
    
    def get_news(self) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π —Å NewsAPI."""
        if not self.news_api_key:
            logger.warning("NEWS_API_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ")
            return self.get_test_news()
        
        news_list = []
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
            import random
            current_time = datetime.now()
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            categories = ['technology', 'science', 'business', 'health', 'sports', 'entertainment']
            random.shuffle(categories)  # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
            
            for category in categories[:3]:  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ 3 —Å–ª—É—á–∞–π–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                url = "https://newsapi.org/v2/top-headlines"
                params = {
                    'apiKey': self.news_api_key,
                    'category': category,
                    'country': 'us',
                    'pageSize': 2,
                    'page': random.randint(1, 3)  # –°–ª—É—á–∞–π–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
                }
                
                response = requests.get(url, params=params, timeout=15)
                response.raise_for_status()
                
                data = response.json()
                if data.get('status') == 'ok' and data.get('articles'):
                    for article in data.get('articles', []):
                        if (article.get('title') and article.get('description') and 
                            article.get('url') and article['url'] != 'https://removed.com'):
                            news_list.append({
                                'title': article['title'],
                                'description': article['description'] or '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ',
                                'url': article['url'],
                                'source': article['source']['name'],
                                'category': self.categories.get(category, category),
                                'published_at': article['publishedAt'],
                                'timestamp': current_time.isoformat()
                            })
            
            # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –º–∞–ª–æ –Ω–æ–≤–æ—Å—Ç–µ–π, –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–µ —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            if len(news_list) < 5:
                try:
                    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
                    countries = ['us', 'gb', 'ca', 'au']
                    random_country = random.choice(countries)
                    
                    url = "https://newsapi.org/v2/top-headlines"
                    params = {
                        'apiKey': self.news_api_key,
                        'country': random_country,
                        'pageSize': 8,
                        'page': random.randint(1, 2)
                    }
                    
                    response = requests.get(url, params=params, timeout=15)
                    response.raise_for_status()
                    
                    data = response.json()
                    if data.get('status') == 'ok' and data.get('articles'):
                        for article in data.get('articles', []):
                            if (article.get('title') and article.get('description') and 
                                article.get('url') and article['url'] != 'https://removed.com'):
                                
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–≤–æ—Å—Ç—å –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞
                                if not any(existing['title'] == article['title'] for existing in news_list):
                                    news_list.append({
                                        'title': article['title'],
                                        'description': article['description'] or '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ',
                                        'url': article['url'],
                                        'source': article['source']['name'],
                                        'category': '–æ–±—â–∏–µ',
                                        'published_at': article['publishedAt'],
                                        'timestamp': current_time.isoformat()
                                    })
                                    
                                    if len(news_list) >= 10:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                                        break
                                        
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—â–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
            
            # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞
            random.shuffle(news_list)
            
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(news_list)} –Ω–æ–≤–æ—Å—Ç–µ–π —Å NewsAPI")
            return news_list[:8]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∞–∫—Å–∏–º—É–º 8 –Ω–æ–≤–æ—Å—Ç–µ–π
            
        except Exception as e:
            log_error(e, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π")
            return self.get_test_news()
    
    def get_test_news(self) -> List[Dict]:
        """–¢–µ—Å—Ç–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏."""
        return [
            {
                'title': '–ù–æ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –≤ –æ–±–ª–∞—Å—Ç–∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞',
                'description': '–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏–ª–∏ –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å –ò–ò, —Å–ø–æ—Å–æ–±–Ω—É—é —Ä–µ—à–∞—Ç—å —Å–ª–æ–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è.',
                'url': 'https://example.com/ai-news',
                'source': 'TechNews',
                'category': '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏',
                'published_at': datetime.now().isoformat(),
                'timestamp': datetime.now().isoformat()
            },
            {
                'title': '–û—Ç–∫—Ä—ã—Ç–∏–µ –≤ –æ–±–ª–∞—Å—Ç–∏ –∫–≤–∞–Ω—Ç–æ–≤–æ–π —Ñ–∏–∑–∏–∫–∏',
                'description': '–£—á–µ–Ω—ã–µ —Å–¥–µ–ª–∞–ª–∏ –≤–∞–∂–Ω–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ –≤ –æ–±–ª–∞—Å—Ç–∏ –∫–≤–∞–Ω—Ç–æ–≤—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π.',
                'url': 'https://example.com/quantum-news',
                'source': 'ScienceDaily',
                'category': '–Ω–∞—É–∫–∞',
                'published_at': datetime.now().isoformat(),
                'timestamp': datetime.now().isoformat()
            }
        ]
    
    def handle_start_command(self, chat_id: int, user_name: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start."""
        log_user_action(chat_id, "start_command", f"user_name={user_name}")
        self._update_user_stats(chat_id)
        
        welcome_text = f"""
–ü—Ä–∏–≤–µ—Ç, {user_name}! üëã

–Ø –±–æ—Ç –¥–ª—è –Ω–æ–≤–æ—Å—Ç–µ–π. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:

üì∞ /news - –ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏
üîç /filter <—Å–ª–æ–≤–æ> - –ù–∞–π—Ç–∏ –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É
‚≠ê /save <–Ω–æ–º–µ—Ä> - –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
‚ù§Ô∏è /favorites - –ü–æ–∫–∞–∑–∞—Ç—å –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
üì¨ /daily - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É
‚ùì /help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É

–ù–∞—á–Ω–µ–º —Å –∫–æ–º–∞–Ω–¥—ã /news –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π!
        """
        
        self.send_message(chat_id, welcome_text)
    
    def handle_news_command(self, chat_id: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /news."""
        log_user_action(chat_id, "news_command")
        self._update_user_stats(chat_id)
        
        self.send_message(chat_id, "üîÑ –ó–∞–≥—Ä—É–∂–∞—é —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏...")
        
        news_list = self.get_news()
        
        if not news_list:
            self.send_message(chat_id, "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–æ–≤–æ—Å—Ç–∏ —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
        filtered_news = self._filter_saved_news(news_list, chat_id)
        
        if not filtered_news:
            self.send_message(chat_id, "‚úÖ –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –≤–∞—à–µ–º –∏–∑–±—Ä–∞–Ω–Ω–æ–º!\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /favorites –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π.")
            return
        
        # –ö—ç—à–∏—Ä—É–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.last_news_cache[chat_id] = filtered_news[:5]
        
        for i, news in enumerate(filtered_news[:5], 1):
            news_text = f"""
üì∞ **{i}. {news['title']}**

üìù {news['description']}

üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {news['category']}
üì∞ –ò—Å—Ç–æ—á–Ω–∏–∫: {news['source']}
üîó [–ß–∏—Ç–∞—Ç—å –¥–∞–ª–µ–µ]({news['url']})
            """
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            keyboard = {
                "inline_keyboard": [[{
                    "text": f"‚≠ê –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å #{i}",
                    "callback_data": f"save_{i}"
                }]]
            }
            
            self.send_message(
                chat_id, 
                news_text, 
                parse_mode='Markdown',
                reply_markup=keyboard
            )
        
        self.send_message(chat_id, "‚úÖ –í–æ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ '‚≠ê –°–æ—Ö—Ä–∞–Ω–∏—Ç—å' –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /save <–Ω–æ–º–µ—Ä> –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.")
    
    def handle_help_command(self, chat_id: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help."""
        help_text = """
üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:

üì∞ /news - –ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –∑–∞ –¥–µ–Ω—å
üîç /filter <—Å–ª–æ–≤–æ> - –ù–∞–π—Ç–∏ –Ω–æ–≤–æ—Å—Ç–∏, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ —É–∫–∞–∑–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ
‚≠ê /save <–Ω–æ–º–µ—Ä> - –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
‚ù§Ô∏è /favorites - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
üì¨ /daily - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è/–æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
‚ùì /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–ü—Ä–∏–º–µ—Ä—ã:
/filter –ò–ò
/save 1
        """
        self.send_message(chat_id, help_text)
    
    def handle_favorites_command(self, chat_id: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /favorites."""
        log_user_action(chat_id, "favorites_command")
        self._update_user_stats(chat_id)
        
        favorites = self._load_favorites()
        user_id_str = str(chat_id)
        
        if user_id_str not in favorites or not favorites[user_id_str]:
            self.send_message(chat_id, "‚ù§Ô∏è –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /news –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –∏ –∫–Ω–æ–ø–∫–∏ '‚≠ê –°–æ—Ö—Ä–∞–Ω–∏—Ç—å' –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ.")
            return
        
        user_favorites = favorites[user_id_str]
        
        if not user_favorites:
            self.send_message(chat_id, "‚ù§Ô∏è –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /news –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –∏ –∫–Ω–æ–ø–∫–∏ '‚≠ê –°–æ—Ö—Ä–∞–Ω–∏—Ç—å' –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ.")
            return
        
        self.send_message(chat_id, f"‚ù§Ô∏è –í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ ({len(user_favorites)} —à—Ç.):")
        
        for i, news in enumerate(user_favorites, 1):
            news_text = f"""
‚≠ê **{i}. {news['title']}**

üìù {news['description']}

üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {news['category']}
üì∞ –ò—Å—Ç–æ—á–Ω–∏–∫: {news['source']}
üîó [–ß–∏—Ç–∞—Ç—å –¥–∞–ª–µ–µ]({news['url']})
üìÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {news.get('saved_at', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
            """
            
            self.send_message(chat_id, news_text, parse_mode='Markdown')
        
        self.send_message(chat_id, "‚úÖ –≠—Ç–æ –≤—Å–µ –≤–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏!")
    
    def handle_save_command(self, chat_id: int, news_number: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /save <–Ω–æ–º–µ—Ä>."""
        log_user_action(chat_id, "save_command", f"news_number={news_number}")
        self._update_user_stats(chat_id)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ
        if chat_id in self.last_news_cache:
            news_list = self.last_news_cache[chat_id]
        else:
            news_list = self.get_news()
            if news_list:
                self.last_news_cache[chat_id] = news_list[:5]
        
        if not news_list or news_number < 1 or news_number > len(news_list):
            self.send_message(chat_id, f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –Ω–æ–≤–æ—Å—Ç–∏. –î–æ—Å—Ç—É–ø–Ω—ã –Ω–æ–º–µ—Ä–∞ –æ—Ç 1 –¥–æ {len(news_list) if news_list else 0}.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /news –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π.")
            return
        
        news_to_save = news_list[news_number - 1]
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
        favorites = self._load_favorites()
        user_id_str = str(chat_id)
        
        if user_id_str not in favorites:
            favorites[user_id_str] = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –ª–∏ —É–∂–µ —ç—Ç–∞ –Ω–æ–≤–æ—Å—Ç—å
        for existing in favorites[user_id_str]:
            if existing['title'] == news_to_save['title']:
                self.send_message(chat_id, "‚ö†Ô∏è –≠—Ç–∞ –Ω–æ–≤–æ—Å—Ç—å —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º!")
                return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ—Å—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
        news_to_save['saved_at'] = datetime.now().isoformat()
        favorites[user_id_str].append(news_to_save)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
        self._save_favorites(favorites)
        
        self.send_message(chat_id, f"‚úÖ –ù–æ–≤–æ—Å—Ç—å '{news_to_save['title'][:50]}...' —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /favorites –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π.")
    
    def handle_daily_command(self, chat_id: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /daily."""
        log_user_action(chat_id, "daily_command")
        self._update_user_stats(chat_id)
        
        subscriptions = self._load_subscriptions()
        user_id_str = str(chat_id)
        
        if user_id_str in subscriptions and subscriptions[user_id_str].get('subscribed', False):
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è
            daily_text = """
üì¨ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π

‚úÖ –í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É!

üìÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ —Å: {subscription_date}

–•–æ—Ç–∏—Ç–µ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è? –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.
            """.format(subscription_date=subscriptions[user_id_str].get('subscribed_at', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'))
            
            keyboard = {
                "inline_keyboard": [[{
                    "text": "‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏",
                    "callback_data": "unsubscribe_daily"
                }]]
            }
            
            self.send_message(chat_id, daily_text, reply_markup=keyboard)
        else:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è
            daily_text = """
üì¨ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π

üéØ –ü–æ–ª—É—á–∞–π—Ç–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –ø–æ–¥–±–æ—Ä–∫—É —Å–∞–º—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –ø—Ä—è–º–æ –≤ Telegram!

üì∞ –ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:
‚Ä¢ –¢–æ–ø-5 –Ω–æ–≤–æ—Å—Ç–µ–π –¥–Ω—è
‚Ä¢ –†–∞–∑–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, –Ω–∞—É–∫–∞, –±–∏–∑–Ω–µ—Å)
‚Ä¢ –¢–æ–ª—å–∫–æ —Å–≤–µ–∂–∏–µ –∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
‚Ä¢ –£–¥–æ–±–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è

–•–æ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è? –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.
            """
            
            keyboard = {
                "inline_keyboard": [[{
                    "text": "‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É",
                    "callback_data": "subscribe_daily"
                }]]
            }
            
            self.send_message(chat_id, daily_text, reply_markup=keyboard)
    
    def handle_filter_command(self, chat_id: int, search_word: str):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /filter."""
        try:
            log_user_action(chat_id, "filter_command", f"search_word={search_word}")
            
            if not search_word.strip():
                self.send_message(chat_id, "‚ùå –£–∫–∞–∂–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞.\n–ü—Ä–∏–º–µ—Ä: /filter –ò–ò")
                return
            
            search_word = search_word.lower()
            self.send_message(chat_id, f"üîç –ò—â—É –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ —Å–ª–æ–≤—É '{search_word}'...")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏
            news_list = self.get_news()
            
            if not news_list:
                self.send_message(chat_id, "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–æ–≤–æ—Å—Ç–∏ —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                return
            
            filtered_news = []
            for news in news_list:
                if (search_word in news.get('title', '').lower() or 
                    search_word in news.get('description', '').lower()):
                    filtered_news.append(news)
            
            if not filtered_news:
                self.send_message(chat_id, f"‚ùå –ù–æ–≤–æ—Å—Ç–∏ –ø–æ —Å–ª–æ–≤—É '{search_word}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                return
            
            self.send_message(chat_id, f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(filtered_news)} –Ω–æ–≤–æ—Å—Ç–µ–π:")
            
            for i, news in enumerate(filtered_news[:5], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 5 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                news_text = f"""
üì∞ **{i}. {news['title']}**

üìù {news['description']}

üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {news['category']}
üì∞ –ò—Å—Ç–æ—á–Ω–∏–∫: {news['source']}
üîó [–ß–∏—Ç–∞—Ç—å –¥–∞–ª–µ–µ]({news['url']})
                """
                
                keyboard = {
                    'inline_keyboard': [[{
                        'text': '‚≠ê –°–æ—Ö—Ä–∞–Ω–∏—Ç—å',
                        'callback_data': f'save_filtered_{i}'
                    }]]
                }
                
                self.send_message(chat_id, news_text, parse_mode='Markdown', reply_markup=keyboard)
                
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                import time
                time.sleep(0.5)
            
        except Exception as e:
            log_error(e, "–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ filter")
            self.send_message(chat_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –Ω–æ–≤–æ—Å—Ç–µ–π.")

    def handle_callback_query(self, chat_id: int, callback_data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç inline –∫–Ω–æ–ø–æ–∫."""
        log_user_action(chat_id, "callback_query", f"callback_data={callback_data}")
        
        if callback_data.startswith('save_'):
            try:
                news_number = int(callback_data.split('_')[1])
                self.handle_save_command(chat_id, news_number)
            except (ValueError, IndexError):
                self.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /save <–Ω–æ–º–µ—Ä>")
        
        elif callback_data.startswith('save_filtered_'):
            try:
                news_number = int(callback_data.split('_')[2])
                self.handle_save_command(chat_id, news_number)
            except (ValueError, IndexError):
                self.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω–æ–π –Ω–æ–≤–æ—Å—Ç–∏.")
        
        elif callback_data == 'subscribe_daily':
            self._subscribe_to_daily(chat_id)
        
        elif callback_data == 'unsubscribe_daily':
            self._unsubscribe_from_daily(chat_id)
        
        else:
            self.send_message(chat_id, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –∫–Ω–æ–ø–∫–∏.")
    
    def _subscribe_to_daily(self, chat_id: int):
        """–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É."""
        try:
            subscriptions = self._load_subscriptions()
            user_id_str = str(chat_id)
            
            subscriptions[user_id_str] = {
                'subscribed': True,
                'subscribed_at': datetime.now().isoformat(),
                'last_sent': None
            }
            
            self._save_subscriptions(subscriptions)
            
            success_text = """
‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É!

üìÖ –° –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–≥–æ –¥–Ω—è –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å:
‚Ä¢ –¢–æ–ø-5 –Ω–æ–≤–æ—Å—Ç–µ–π –¥–Ω—è
‚Ä¢ –†–∞–∑–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π
‚Ä¢ –¢–æ–ª—å–∫–æ —Å–≤–µ–∂–∏–µ –∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã

üì¨ –†–∞—Å—Å—ã–ª–∫–∞ –ø—Ä–∏—Ö–æ–¥–∏—Ç –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 9:00 –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏.

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /daily –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–æ–π.
            """
            
            self.send_message(chat_id, success_text)
            log_user_action(chat_id, "daily_subscribed")
            
        except Exception as e:
            log_error(e, "–û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É")
            self.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    def _unsubscribe_from_daily(self, chat_id: int):
        """–û—Ç–ø–∏—Å–∫–∞ –æ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏."""
        try:
            subscriptions = self._load_subscriptions()
            user_id_str = str(chat_id)
            
            if user_id_str in subscriptions:
                subscriptions[user_id_str]['subscribed'] = False
                subscriptions[user_id_str]['unsubscribed_at'] = datetime.now().isoformat()
                self._save_subscriptions(subscriptions)
            
            success_text = """
‚ùå –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏.

üì∞ –í—ã –ø–æ-–ø—Ä–µ–∂–Ω–µ–º—É –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é:
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /news –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è–π—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ —Å –ø–æ–º–æ—â—å—é /save <–Ω–æ–º–µ—Ä>
‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ —Å –ø–æ–º–æ—â—å—é /favorites

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /daily –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.
            """
            
            self.send_message(chat_id, success_text)
            log_user_action(chat_id, "daily_unsubscribed")
            
        except Exception as e:
            log_error(e, "–û—à–∏–±–∫–∞ –æ—Ç–ø–∏—Å–∫–∏ –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏")
            self.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
bot = SimpleNewsBot()

@app.route('/webhook', methods=['POST'])
def webhook():
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook."""
    try:
        update_data = request.get_json()
        
        if update_data:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            if 'message' in update_data:
                message = update_data['message']
                chat_id = message['chat']['id']
                user_name = message['from'].get('first_name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
                text = message.get('text', '')
                
                log_user_action(chat_id, "webhook_update", f"text={text}")
                
                if text == '/start':
                    bot.handle_start_command(chat_id, user_name)
                elif text == '/news':
                    bot.handle_news_command(chat_id)
                elif text == '/help':
                    bot.handle_help_command(chat_id)
                elif text == '/favorites':
                    bot.handle_favorites_command(chat_id)
                elif text == '/daily':
                    bot.handle_daily_command(chat_id)
                elif text.startswith('/filter '):
                    try:
                        search_word = ' '.join(text.split()[1:])
                        bot.handle_filter_command(chat_id, search_word)
                    except IndexError:
                        bot.send_message(chat_id, "‚ùå –£–∫–∞–∂–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞.\n–ü—Ä–∏–º–µ—Ä: /filter –ò–ò")
                elif text.startswith('/save '):
                    try:
                        news_number = int(text.split()[1])
                        bot.handle_save_command(chat_id, news_number)
                    except (ValueError, IndexError):
                        bot.send_message(chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /save <–Ω–æ–º–µ—Ä>\n\n–ü—Ä–∏–º–µ—Ä: /save 1")
                else:
                    bot.send_message(chat_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.")
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç inline –∫–Ω–æ–ø–æ–∫
            elif 'callback_query' in update_data:
                callback_query = update_data['callback_query']
                chat_id = callback_query['message']['chat']['id']
                callback_data = callback_query.get('data', '')
                
                log_user_action(chat_id, "webhook_update", f"callback_data={callback_data}")
                
                # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
                try:
                    url = f"https://api.telegram.org/bot{bot.token}/answerCallbackQuery"
                    data = {
                        'callback_query_id': callback_query['id'],
                        'text': '–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...'
                    }
                    requests.post(url, json=data, timeout=5)
                except Exception as e:
                    log_error(e, "–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback query")
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback
                bot.handle_callback_query(chat_id, callback_data)
        
        return "OK", 200
        
    except Exception as e:
        log_error(e, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook")
        return "Error", 500

@app.route('/health', methods=['GET'])
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞."""
    return {
        "status": "healthy",
        "timestamp": datetime.now().isoformat(),
        "bot_token_configured": bool(bot.token),
        "news_api_configured": bool(bot.news_api_key)
    }

@app.route('/', methods=['GET'])
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞."""
    return """
    <h1>Simple News Bot Webhook</h1>
    <p>–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! üöÄ</p>
    <ul>
        <li><a href="/health">Health Check</a></li>
    </ul>
    """

def main():
    """–ó–∞–ø—É—Å–∫ webhook —Å–µ—Ä–≤–µ—Ä–∞."""
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç–æ–≥–æ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ News Bot —Å webhook...")
    print("‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    print("üåê Webhook endpoint: /webhook")
    print("üìä Health check: /health")
    
    app.run(host='0.0.0.0', port=8000, debug=False)

if __name__ == '__main__':
    main()

#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–±–æ—Ä–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
"""

import json
import os
from datetime import datetime
from typing import Dict, List

class FeedbackCollector:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–±–æ—Ä–∞ –∏ –∞–Ω–∞–ª–∏–∑–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏."""
    
    def __init__(self):
        self.feedback_file = "feedback.json"
        self.stats_file = "user_stats.json"
        self.feedback_data = self._load_feedback()
        self.stats_data = self._load_stats()
    
    def _load_feedback(self) -> List[Dict]:
        """–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏."""
        try:
            if os.path.exists(self.feedback_file):
                with open(self.feedback_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
            return []
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: {e}")
            return []
    
    def _load_stats(self) -> Dict:
        """–ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
        try:
            if os.path.exists(self.stats_file):
                with open(self.stats_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
            return {
                "total_users": 0,
                "active_users": 0,
                "commands_used": {},
                "last_update": None
            }
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {"total_users": 0, "active_users": 0, "commands_used": {}, "last_update": None}
    
    def _save_feedback(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏."""
        try:
            with open(self.feedback_file, 'w', encoding='utf-8') as f:
                json.dump(self.feedback_data, f, ensure_ascii=False, indent=2)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: {e}")
    
    def _save_stats(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É."""
        try:
            with open(self.stats_file, 'w', encoding='utf-8') as f:
                json.dump(self.stats_data, f, ensure_ascii=False, indent=2)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    def add_feedback(self, user_id: int, user_name: str, rating: int, 
                    likes: str, dislikes: str, suggestions: str):
        """–î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å."""
        feedback = {
            "user_id": user_id,
            "user_name": user_name,
            "rating": rating,
            "likes": likes,
            "dislikes": dislikes,
            "suggestions": suggestions,
            "timestamp": datetime.now().isoformat()
        }
        
        self.feedback_data.append(feedback)
        self._save_feedback()
        
        print(f"‚úÖ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –æ—Ç {user_name} –¥–æ–±–∞–≤–ª–µ–Ω–∞")
    
    def update_stats(self, user_id: int, command: str):
        """–û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥."""
        if "commands_used" not in self.stats_data:
            self.stats_data["commands_used"] = {}
        
        if command not in self.stats_data["commands_used"]:
            self.stats_data["commands_used"][command] = 0
        
        self.stats_data["commands_used"][command] += 1
        self.stats_data["last_update"] = datetime.now().isoformat()
        
        self._save_stats()
    
    def get_feedback_summary(self) -> Dict:
        """–ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–¥–∫—É –ø–æ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏."""
        if not self.feedback_data:
            return {"message": "–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –ø–æ–∫–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞"}
        
        total_feedback = len(self.feedback_data)
        avg_rating = sum(f["rating"] for f in self.feedback_data) / total_feedback
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–∞–π–∫–∏
        likes_count = {}
        for feedback in self.feedback_data:
            likes = feedback["likes"].lower()
            if "–Ω–æ–≤–æ—Å—Ç–∏" in likes:
                likes_count["–ù–æ–≤–æ—Å—Ç–∏"] = likes_count.get("–ù–æ–≤–æ—Å—Ç–∏", 0) + 1
            if "–ø–æ–∏—Å–∫" in likes:
                likes_count["–ü–æ–∏—Å–∫"] = likes_count.get("–ü–æ–∏—Å–∫", 0) + 1
            if "–∫–∞—Ç–µ–≥–æ—Ä–∏–∏" in likes:
                likes_count["–ö–∞—Ç–µ–≥–æ—Ä–∏–∏"] = likes_count.get("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏", 0) + 1
            if "–∏–∑–±—Ä–∞–Ω–Ω–æ–µ" in likes:
                likes_count["–ò–∑–±—Ä–∞–Ω–Ω–æ–µ"] = likes_count.get("–ò–∑–±—Ä–∞–Ω–Ω–æ–µ", 0) + 1
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º—ã
        problems_count = {}
        for feedback in self.feedback_data:
            dislikes = feedback["dislikes"].lower()
            if "–º–µ–¥–ª–µ–Ω–Ω–æ" in dislikes or "–º–µ–¥–ª–µ–Ω–Ω—ã–π" in dislikes:
                problems_count["–ú–µ–¥–ª–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞"] = problems_count.get("–ú–µ–¥–ª–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞", 0) + 1
            if "–æ—à–∏–±–∫" in dislikes:
                problems_count["–û—à–∏–±–∫–∏"] = problems_count.get("–û—à–∏–±–∫–∏", 0) + 1
            if "–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å" in dislikes:
                problems_count["–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å"] = problems_count.get("–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å", 0) + 1
        
        return {
            "total_feedback": total_feedback,
            "average_rating": round(avg_rating, 2),
            "top_likes": sorted(likes_count.items(), key=lambda x: x[1], reverse=True),
            "top_problems": sorted(problems_count.items(), key=lambda x: x[1], reverse=True),
            "command_stats": self.stats_data.get("commands_used", {}),
            "last_update": self.stats_data.get("last_update")
        }
    
    def generate_report(self) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –ø–æ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏."""
        summary = self.get_feedback_summary()
        
        if "message" in summary:
            return summary["message"]
        
        report = f"""
üìä –û–¢–ß–ï–¢ –ü–û –û–ë–†–ê–¢–ù–û–ô –°–í–Ø–ó–ò
{'=' * 50}

üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
‚Ä¢ –í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤: {summary['total_feedback']}
‚Ä¢ –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {summary['average_rating']}/5
‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {summary['last_update']}

üëç –ß—Ç–æ –Ω—Ä–∞–≤–∏—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:
"""
        
        for feature, count in summary['top_likes'][:3]:
            report += f"‚Ä¢ {feature}: {count} —É–ø–æ–º–∏–Ω–∞–Ω–∏–π\n"
        
        report += "\nüëé –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:\n"
        for problem, count in summary['top_problems'][:3]:
            report += f"‚Ä¢ {problem}: {count} —É–ø–æ–º–∏–Ω–∞–Ω–∏–π\n"
        
        report += "\nüì± –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º–∞–Ω–¥:\n"
        for command, count in sorted(summary['command_stats'].items(), 
                                   key=lambda x: x[1], reverse=True)[:5]:
            report += f"‚Ä¢ /{command}: {count} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π\n"
        
        return report

def collect_feedback_interactive():
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Å–±–æ—Ä –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏."""
    collector = FeedbackCollector()
    
    print("üìù –°–±–æ—Ä –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    print("=" * 40)
    
    while True:
        print("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
        print("1. –î–æ–±–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤")
        print("2. –ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–¥–∫—É")
        print("3. –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç")
        print("4. –í—ã—Ö–æ–¥")
        
        choice = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-4): ")
        
        if choice == "1":
            print("\nüìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ—Ç–∑—ã–≤–∞:")
            user_name = input("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ")
            user_id = input("ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏–ª–∏ Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞): ")
            user_id = int(user_id) if user_id.isdigit() else 0
            
            print("\n–û—Ü–µ–Ω–∏—Ç–µ –±–æ—Ç–∞ –æ—Ç 1 –¥–æ 5:")
            rating = int(input("–û—Ü–µ–Ω–∫–∞ (1-5): "))
            
            print("\n–ß—Ç–æ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å?")
            likes = input("–ü–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å: ")
            
            print("\n–ß—Ç–æ –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å?")
            dislikes = input("–ù–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å: ")
            
            print("\n–í–∞—à–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é:")
            suggestions = input("–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: ")
            
            collector.add_feedback(user_id, user_name, rating, likes, dislikes, suggestions)
            
        elif choice == "2":
            summary = collector.get_feedback_summary()
            print("\nüìä –°–≤–æ–¥–∫–∞ –ø–æ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏:")
            print(json.dumps(summary, ensure_ascii=False, indent=2))
            
        elif choice == "3":
            report = collector.generate_report()
            print("\n" + report)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª
            with open("feedback_report.txt", "w", encoding="utf-8") as f:
                f.write(report)
            print("\nüìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ feedback_report.txt")
            
        elif choice == "4":
            print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
            
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    collect_feedback_interactive()

if __name__ == '__main__':
    main()

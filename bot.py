#!/usr/bin/env python3
"""
Telegram News Bot
–ë–æ—Ç –¥–ª—è —Å–±–æ—Ä–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç—è–º–∏ –ø–æ —Ç–µ–º–∞–º: —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, –Ω–∞—É–∫–∞, –±–∏–∑–Ω–µ—Å.
"""

import os
import json
import logging
import asyncio
from datetime import datetime, timedelta
from typing import Dict, List, Optional
import requests
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler('bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥–µ–ø–ª–æ—è
def log_user_action(user_id: int, action: str, details: str = ""):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏."""
    logger.info(f"USER_ACTION: user_id={user_id}, action={action}, details={details}")

def log_error(error: Exception, context: str = ""):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞."""
    logger.error(f"ERROR: {context} - {str(error)}", exc_info=True)

class NewsBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å Telegram-–±–æ—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏."""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞."""
        self.token = os.getenv('TELEGRAM_BOT_TOKEN')
        if not self.token:
            raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        
        self.news_api_key = os.getenv('NEWS_API_KEY')
        self.data_dir = 'data'
        self.news_file = os.path.join(self.data_dir, 'news.json')
        self.users_file = os.path.join(self.data_dir, 'users.json')
        self.stats_file = os.path.join(self.data_dir, 'user_stats.json')
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        os.makedirs(self.data_dir, exist_ok=True)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö
        self._init_data_files()
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π
        self.categories = {
            'technology': '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏',
            'science': '–Ω–∞—É–∫–∞', 
            'business': '–±–∏–∑–Ω–µ—Å',
            'health': '–∑–¥–æ—Ä–æ–≤—å–µ',
            'sports': '—Å–ø–æ—Ä—Ç',
            'entertainment': '—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è',
            'general': '–æ–±—â–∏–µ'
        }
        
        # –°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–æ—Ä–º—É –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
        self.feedback_form_url = "https://forms.gle/m9AHSMgKHsmG437p9"
    
    def _init_data_files(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤ –¥–∞–Ω–Ω—ã—Ö."""
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
        if not os.path.exists(self.news_file):
            with open(self.news_file, 'w', encoding='utf-8') as f:
                json.dump({
                    'last_update': None,
                    'news': []
                }, f, ensure_ascii=False, indent=2)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if not os.path.exists(self.users_file):
            with open(self.users_file, 'w', encoding='utf-8') as f:
                json.dump({
                    'subscribers': [],
                    'favorites': {}
                }, f, ensure_ascii=False, indent=2)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        if not os.path.exists(self.stats_file):
            with open(self.stats_file, 'w', encoding='utf-8') as f:
                json.dump({
                    'user_stats': {},
                    'total_commands': 0,
                    'last_update': None
                }, f, ensure_ascii=False, indent=2)
    
    def _load_data(self, file_path: str) -> Dict:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON —Ñ–∞–π–ª–∞."""
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                return json.load(f)
        except (FileNotFoundError, json.JSONDecodeError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ {file_path}: {e}")
            return {}
    
    def _save_data(self, file_path: str, data: Dict):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ JSON —Ñ–∞–π–ª."""
        try:
            with open(file_path, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ {file_path}: {e}")
    
    def _update_user_stats(self, user_id: int, command: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        try:
            stats_data = self._load_data(self.stats_file)
            user_stats = stats_data.get('user_stats', {})
            
            if str(user_id) not in user_stats:
                user_stats[str(user_id)] = {
                    'commands_count': 0,
                    'last_command': None,
                    'feedback_sent': False,
                    'commands_used': {}
                }
            
            user_stats[str(user_id)]['commands_count'] += 1
            user_stats[str(user_id)]['last_command'] = command
            
            if command not in user_stats[str(user_id)]['commands_used']:
                user_stats[str(user_id)]['commands_used'][command] = 0
            user_stats[str(user_id)]['commands_used'][command] += 1
            
            stats_data['user_stats'] = user_stats
            stats_data['total_commands'] = stats_data.get('total_commands', 0) + 1
            stats_data['last_update'] = datetime.now().isoformat()
            
            self._save_data(self.stats_file, stats_data)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ä–º—É –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
            if user_stats[str(user_id)]['commands_count'] >= 10 and not user_stats[str(user_id)]['feedback_sent']:
                return True
            
            return False
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return False
    
    async def _send_feedback_form(self, update: Update):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
        try:
            feedback_text = f"""
üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –±–æ—Ç–∞ —É–∂–µ 10 —Ä–∞–∑!

üìù –ü–æ–º–æ–≥–∏—Ç–µ –Ω–∞–º —É–ª—É—á—à–∏—Ç—å –±–æ—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏–≤ –∫–æ—Ä–æ—Ç–∫—É—é —Ñ–æ—Ä–º—É –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏:

üîó {self.feedback_form_url}

–í–∞—à–µ –º–Ω–µ–Ω–∏–µ –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ –¥–ª—è –Ω–∞—Å! üíô
            """
            
            await update.message.reply_text(feedback_text)
            
            # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ —Ñ–æ—Ä–º–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞
            stats_data = self._load_data(self.stats_file)
            user_stats = stats_data.get('user_stats', {})
            user_id = str(update.effective_user.id)
            
            if user_id in user_stats:
                user_stats[user_id]['feedback_sent'] = True
                stats_data['user_stats'] = user_stats
                self._save_data(self.stats_file, stats_data)
            
            log_user_action(update.effective_user.id, "feedback_form_sent")
            
        except Exception as e:
            log_error(e, "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏")
    
    async def _fetch_news(self) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π —Å News API."""
        if not self.news_api_key:
            logger.warning("NEWS_API_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ")
            return self._get_test_news()
        
        news_list = []
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            for category in ['technology', 'science', 'business', 'health', 'sports']:
                url = f"https://newsapi.org/v2/top-headlines"
                params = {
                    'apiKey': self.news_api_key,
                    'category': category,
                    'country': 'us',
                    'pageSize': 3  # –£–º–µ–Ω—å—à–∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                }
                
                response = requests.get(url, params=params, timeout=15)
                response.raise_for_status()
                
                data = response.json()
                if data.get('status') == 'ok' and data.get('articles'):
                    for article in data.get('articles', []):
                        if article.get('title') and article.get('description') and article.get('url'):
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ URL –≤–∞–ª–∏–¥–Ω—ã–π
                            if article['url'] != 'https://removed.com':
                                news_list.append({
                                    'title': article['title'],
                                    'description': article['description'] or '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ',
                                    'url': article['url'],
                                    'source': article['source']['name'],
                                    'category': self.categories.get(category, category),
                                    'published_at': article['publishedAt'],
                                    'timestamp': datetime.now().isoformat()
                                })
                else:
                    logger.warning(f"News API –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}")
                
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                await asyncio.sleep(0.5)
            
            # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –º–∞–ª–æ –Ω–æ–≤–æ—Å—Ç–µ–π, –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –æ–±—â–∏–µ –Ω–æ–≤–æ—Å—Ç–∏
            if len(news_list) < 5:
                try:
                    url = "https://newsapi.org/v2/top-headlines"
                    params = {
                        'apiKey': self.news_api_key,
                        'country': 'us',
                        'pageSize': 10
                    }
                    
                    response = requests.get(url, params=params, timeout=15)
                    response.raise_for_status()
                    
                    data = response.json()
                    if data.get('status') == 'ok' and data.get('articles'):
                        for article in data.get('articles', []):
                            if (article.get('title') and article.get('description') and 
                                article.get('url') and article['url'] != 'https://removed.com'):
                                
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–≤–æ—Å—Ç—å –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞
                                if not any(existing['title'] == article['title'] for existing in news_list):
                                    news_list.append({
                                        'title': article['title'],
                                        'description': article['description'] or '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ',
                                        'url': article['url'],
                                        'source': article['source']['name'],
                                        'category': '–æ–±—â–∏–µ',
                                        'published_at': article['publishedAt'],
                                        'timestamp': datetime.now().isoformat()
                                    })
                                    
                                    if len(news_list) >= 15:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                                        break
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—â–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
                
        except requests.RequestException as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
            return self._get_test_news()
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
            return self._get_test_news()
        
        # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ –Ω–æ–≤–æ—Å—Ç–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        if not news_list:
            logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ —Å News API, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ")
            return self._get_test_news()
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(news_list)} –Ω–æ–≤–æ—Å—Ç–µ–π —Å News API")
        return news_list
    
    def _get_test_news(self) -> List[Dict]:
        """–¢–µ—Å—Ç–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏."""
        return [
            {
                'title': '–ù–æ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –≤ –æ–±–ª–∞—Å—Ç–∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞',
                'description': '–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏–ª–∏ –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å –ò–ò, —Å–ø–æ—Å–æ–±–Ω—É—é —Ä–µ—à–∞—Ç—å —Å–ª–æ–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è.',
                'url': 'https://example.com/ai-news',
                'source': 'TechNews',
                'category': '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏',
                'published_at': datetime.now().isoformat(),
                'timestamp': datetime.now().isoformat()
            },
            {
                'title': '–û—Ç–∫—Ä—ã—Ç–∏–µ –≤ –æ–±–ª–∞—Å—Ç–∏ –∫–≤–∞–Ω—Ç–æ–≤–æ–π —Ñ–∏–∑–∏–∫–∏',
                'description': '–£—á–µ–Ω—ã–µ —Å–¥–µ–ª–∞–ª–∏ –≤–∞–∂–Ω–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ –≤ –æ–±–ª–∞—Å—Ç–∏ –∫–≤–∞–Ω—Ç–æ–≤—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä–æ–µ –º–æ–∂–µ—Ç —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—é.',
                'url': 'https://example.com/quantum-news',
                'source': 'ScienceDaily',
                'category': '–Ω–∞—É–∫–∞',
                'published_at': datetime.now().isoformat(),
                'timestamp': datetime.now().isoformat()
            },
            {
                'title': '–†–æ—Å—Ç —Ä—ã–Ω–∫–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç',
                'description': '–ê–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É—é—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–π —Ä–æ—Å—Ç –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–æ–≥–æ —Ä—ã–Ω–∫–∞ –≤ –±–ª–∏–∂–∞–π—à–∏–µ –º–µ—Å—è—Ü—ã.',
                'url': 'https://example.com/crypto-news',
                'source': 'BusinessToday',
                'category': '–±–∏–∑–Ω–µ—Å',
                'published_at': datetime.now().isoformat(),
                'timestamp': datetime.now().isoformat()
            },
            {
                'title': '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞',
                'description': '–ö–æ–º–ø–∞–Ω–∏—è –ø—Ä–µ–¥—Å—Ç–∞–≤–∏–ª–∞ –Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é –∏ —ç–Ω–µ—Ä–≥–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é.',
                'url': 'https://example.com/processor-news',
                'source': 'TechWorld',
                'category': '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏',
                'published_at': datetime.now().isoformat(),
                'timestamp': datetime.now().isoformat()
            },
            {
                'title': '–ü—Ä–æ—Ä—ã–≤ –≤ –º–µ–¥–∏—Ü–∏–Ω–µ',
                'description': '–£—á–µ–Ω—ã–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–ª–∏ –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ –ª–µ—á–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±–Ω–∞–¥–µ–∂–∏–≤–∞—é—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –∫–ª–∏–Ω–∏—á–µ—Å–∫–∏—Ö –∏—Å–ø—ã—Ç–∞–Ω–∏—è—Ö.',
                'url': 'https://example.com/medical-news',
                'source': 'MedicalNews',
                'category': '–Ω–∞—É–∫–∞',
                'published_at': datetime.now().isoformat(),
                'timestamp': datetime.now().isoformat()
            },
            {
                'title': '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –≤ —Å—Ç–∞—Ä—Ç–∞–ø—ã',
                'description': '–í–µ–Ω—á—É—Ä–Ω—ã–µ —Ñ–æ–Ω–¥—ã —É–≤–µ–ª–∏—á–∏–≤–∞—é—Ç –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –≤ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Å—Ç–∞—Ä—Ç–∞–ø—ã, –æ—Å–æ–±–µ–Ω–Ω–æ –≤ –æ–±–ª–∞—Å—Ç–∏ —Ñ–∏–Ω—Ç–µ—Ö–∞.',
                'url': 'https://example.com/startup-news',
                'source': 'VentureBeat',
                'category': '–±–∏–∑–Ω–µ—Å',
                'published_at': datetime.now().isoformat(),
                'timestamp': datetime.now().isoformat()
            }
        ]
    
    async def _update_news(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π."""
        try:
            news_data = self._load_data(self.news_file)
            current_time = datetime.now()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ 30 –º–∏–Ω—É—Ç –∏–ª–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ—Ç
            if (not news_data.get('last_update') or 
                datetime.fromisoformat(news_data['last_update']) < current_time - timedelta(minutes=30)):
                
                logger.info("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π...")
                new_news = await self._fetch_news()
                
                news_data['news'] = new_news
                news_data['last_update'] = current_time.isoformat()
                
                self._save_data(self.news_file, news_data)
                logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ {len(new_news)} –Ω–æ–≤–æ—Å—Ç–µ–π")
            
            return news_data['news']
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
            return []
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
        user = update.effective_user
        log_user_action(user.id, "start_command", f"user_name={user.first_name}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º—É –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
        should_send_feedback = self._update_user_stats(user.id, "start")
        
        welcome_text = f"""
–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã

–Ø –±–æ—Ç –¥–ª—è –Ω–æ–≤–æ—Å—Ç–µ–π. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:

üì∞ /news - –ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏
üè∑Ô∏è /category <–∫–∞—Ç–µ–≥–æ—Ä–∏—è> - –ù–æ–≤–æ—Å—Ç–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
üîç /filter <—Å–ª–æ–≤–æ> - –ù–∞–π—Ç–∏ –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É
‚≠ê /save <–Ω–æ–º–µ—Ä> - –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
‚ù§Ô∏è /favorites - –ü–æ–∫–∞–∑–∞—Ç—å –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
üì¨ /daily - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É
‚ùì /help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É

–ù–∞—á–Ω–µ–º —Å –∫–æ–º–∞–Ω–¥—ã /news –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π!
        """
        await update.message.reply_text(welcome_text)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if should_send_feedback:
            await self._send_feedback_form(update)
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help."""
        help_text = """
üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:

üì∞ /news - –ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –∑–∞ –¥–µ–Ω—å
üè∑Ô∏è /category <–∫–∞—Ç–µ–≥–æ—Ä–∏—è> - –ù–æ–≤–æ—Å—Ç–∏ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
üîç /filter <—Å–ª–æ–≤–æ> - –ù–∞–π—Ç–∏ –Ω–æ–≤–æ—Å—Ç–∏, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ —É–∫–∞–∑–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ
‚≠ê /save <–Ω–æ–º–µ—Ä> - –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
‚ù§Ô∏è /favorites - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
üì¨ /daily - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è/–æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
‚ùì /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, –Ω–∞—É–∫–∞, –±–∏–∑–Ω–µ—Å, –∑–¥–æ—Ä–æ–≤—å–µ, —Å–ø–æ—Ä—Ç, —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è

–ü—Ä–∏–º–µ—Ä—ã:
/category —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
/filter –ò–ò
/save 1
        """
        await update.message.reply_text(help_text)
    
    async def news_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /news."""
        try:
            user = update.effective_user
            log_user_action(user.id, "news_command")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º—É –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
            should_send_feedback = self._update_user_stats(user.id, "news")
            
            await update.message.reply_text("üîÑ –ó–∞–≥—Ä—É–∂–∞—é —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏...")
            
            news_list = await self._update_news()
            
            if not news_list:
                await update.message.reply_text("‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–æ–≤–æ—Å—Ç–∏ —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ—Ä—Ü–∏—è–º–∏
            for i, news in enumerate(news_list[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 10 –Ω–æ–≤–æ—Å—Ç–µ–π
                news_text = f"""
üì∞ **{i}. {news['title']}**

üìù {news['description']}

üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {news['category']}
üì∞ –ò—Å—Ç–æ—á–Ω–∏–∫: {news['source']}
üîó [–ß–∏—Ç–∞—Ç—å –¥–∞–ª–µ–µ]({news['url']})
                """
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                keyboard = [[InlineKeyboardButton(f"‚≠ê –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å #{i}", callback_data=f"save_{i}")]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await update.message.reply_text(
                    news_text, 
                    parse_mode='Markdown',
                    reply_markup=reply_markup,
                    disable_web_page_preview=True
                )
                
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                await asyncio.sleep(0.5)
            
            await update.message.reply_text("‚úÖ –í–æ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /save <–Ω–æ–º–µ—Ä> –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if should_send_feedback:
                await self._send_feedback_form(update)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ news: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤–æ—Å—Ç–µ–π.")
    
    async def filter_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /filter."""
        try:
            if not context.args:
                await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞.\n–ü—Ä–∏–º–µ—Ä: /filter –ò–ò")
                return
            
            search_word = ' '.join(context.args).lower()
            await update.message.reply_text(f"üîç –ò—â—É –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ —Å–ª–æ–≤—É '{search_word}'...")
            
            # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç—è—Ö
            news_data = self._load_data(self.news_file)
            news_list = news_data.get('news', [])
            
            filtered_news = []
            for news in news_list:
                if (search_word in news.get('title', '').lower() or 
                    search_word in news.get('description', '').lower()):
                    filtered_news.append(news)
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å NewsAPI –∫–ª—é—á, –∏—â–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
            if self.news_api_key and len(filtered_news) < 3:
                try:
                    api_news = await self._search_news_api(search_word)
                    filtered_news.extend(api_news)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —á–µ—Ä–µ–∑ NewsAPI: {e}")
            
            if not filtered_news:
                await update.message.reply_text(f"‚ùå –ù–æ–≤–æ—Å—Ç–∏ –ø–æ —Å–ª–æ–≤—É '{search_word}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                return
            
            await update.message.reply_text(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(filtered_news)} –Ω–æ–≤–æ—Å—Ç–µ–π:")
            
            for i, news in enumerate(filtered_news[:5], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 5 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                news_text = f"""
üì∞ **{i}. {news['title']}**

üìù {news['description']}

üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {news['category']}
üì∞ –ò—Å—Ç–æ—á–Ω–∏–∫: {news['source']}
üîó [–ß–∏—Ç–∞—Ç—å –¥–∞–ª–µ–µ]({news['url']})
                """
                
                keyboard = [[InlineKeyboardButton(f"‚≠ê –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data=f"save_filtered_{i}")]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await update.message.reply_text(
                    news_text,
                    parse_mode='Markdown',
                    reply_markup=reply_markup,
                    disable_web_page_preview=True
                )
                
                await asyncio.sleep(0.5)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ filter: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –Ω–æ–≤–æ—Å—Ç–µ–π.")
    
    async def _search_news_api(self, query: str) -> List[Dict]:
        """–ü–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π —á–µ—Ä–µ–∑ NewsAPI –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É."""
        try:
            url = "https://newsapi.org/v2/everything"
            params = {
                'apiKey': self.news_api_key,
                'q': query,
                'language': 'en',
                'sortBy': 'publishedAt',
                'pageSize': 10,
                'from': (datetime.now() - timedelta(days=7)).strftime('%Y-%m-%d')  # –ù–æ–≤–æ—Å—Ç–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é
            }
            
            response = requests.get(url, params=params, timeout=15)
            response.raise_for_status()
            
            data = response.json()
            news_list = []
            
            if data.get('status') == 'ok' and data.get('articles'):
                for article in data.get('articles', []):
                    if (article.get('title') and article.get('description') and 
                        article.get('url') and article['url'] != 'https://removed.com'):
                        news_list.append({
                            'title': article['title'],
                            'description': article['description'] or '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ',
                            'url': article['url'],
                            'source': article['source']['name'],
                            'category': '–ø–æ–∏—Å–∫',
                            'published_at': article['publishedAt'],
                            'timestamp': datetime.now().isoformat()
                        })
            
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(news_list)} –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}' —á–µ—Ä–µ–∑ NewsAPI")
            return news_list
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —á–µ—Ä–µ–∑ NewsAPI: {e}")
            return []
    
    async def category_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /category."""
        try:
            if not context.args:
                categories_text = "üè∑Ô∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n\n"
                for eng, rus in self.categories.items():
                    categories_text += f"‚Ä¢ {rus} (/{eng})\n"
                categories_text += "\n–ü—Ä–∏–º–µ—Ä: /category —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏"
                await update.message.reply_text(categories_text)
                return
            
            category_input = ' '.join(context.args).lower()
            
            # –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∞–Ω–≥–ª–∏–π—Å–∫—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            category_key = None
            for eng, rus in self.categories.items():
                if rus.lower() == category_input or eng.lower() == category_input:
                    category_key = eng
                    break
            
            if not category_key:
                await update.message.reply_text(f"‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_input}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /category –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π.")
                return
            
            await update.message.reply_text(f"üîÑ –ó–∞–≥—Ä—É–∂–∞—é –Ω–æ–≤–æ—Å—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{self.categories[category_key]}'...")
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ NewsAPI –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            if self.news_api_key:
                try:
                    url = f"https://newsapi.org/v2/top-headlines"
                    params = {
                        'apiKey': self.news_api_key,
                        'category': category_key,
                        'country': 'us',
                        'pageSize': 10
                    }
                    
                    response = requests.get(url, params=params, timeout=15)
                    response.raise_for_status()
                    
                    data = response.json()
                    news_list = []
                    
                    if data.get('status') == 'ok' and data.get('articles'):
                        for article in data.get('articles', []):
                            if (article.get('title') and article.get('description') and 
                                article.get('url') and article['url'] != 'https://removed.com'):
                                news_list.append({
                                    'title': article['title'],
                                    'description': article['description'] or '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ',
                                    'url': article['url'],
                                    'source': article['source']['name'],
                                    'category': self.categories[category_key],
                                    'published_at': article['publishedAt'],
                                    'timestamp': datetime.now().isoformat()
                                })
                    
                    if not news_list:
                        await update.message.reply_text(f"‚ùå –ù–æ–≤–æ—Å—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{self.categories[category_key]}' —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
                        return
                    
                    await update.message.reply_text(f"üì∞ –ù–æ–≤–æ—Å—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{self.categories[category_key]}' ({len(news_list)} —à—Ç.):")
                    
                    for i, news in enumerate(news_list[:8], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 8 –Ω–æ–≤–æ—Å—Ç–µ–π
                        news_text = f"""
üì∞ **{i}. {news['title']}**

üìù {news['description']}

üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {news['category']}
üì∞ –ò—Å—Ç–æ—á–Ω–∏–∫: {news['source']}
üîó [–ß–∏—Ç–∞—Ç—å –¥–∞–ª–µ–µ]({news['url']})
                        """
                        
                        keyboard = [[InlineKeyboardButton(f"‚≠ê –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å #{i}", callback_data=f"save_category_{i}")]]
                        reply_markup = InlineKeyboardMarkup(keyboard)
                        
                        await update.message.reply_text(
                            news_text,
                            parse_mode='Markdown',
                            reply_markup=reply_markup,
                            disable_web_page_preview=True
                        )
                        
                        await asyncio.sleep(0.5)
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
                    await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{self.categories[category_key]}'.")
            else:
                await update.message.reply_text("‚ùå NewsAPI –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /news –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—â–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π.")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ category: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
    
    async def save_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /save."""
        try:
            if not context.args:
                await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.\n–ü—Ä–∏–º–µ—Ä: /save 1")
                return
            
            try:
                news_number = int(context.args[0])
            except ValueError:
                await update.message.reply_text("‚ùå –ù–æ–º–µ—Ä –Ω–æ–≤–æ—Å—Ç–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
                return
            
            user_id = update.effective_user.id
            news_data = self._load_data(self.news_file)
            news_list = news_data.get('news', [])
            
            if news_number < 1 or news_number > len(news_list):
                await update.message.reply_text(f"‚ùå –ù–æ–≤–æ—Å—Ç–∏ —Å –Ω–æ–º–µ—Ä–æ–º {news_number} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
                return
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            users_data = self._load_data(self.users_file)
            favorites = users_data.get('favorites', {})
            
            if str(user_id) not in favorites:
                favorites[str(user_id)] = []
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –ª–∏ —É–∂–µ —ç—Ç–∞ –Ω–æ–≤–æ—Å—Ç—å
            news_to_save = news_list[news_number - 1]
            if any(saved['title'] == news_to_save['title'] for saved in favorites[str(user_id)]):
                await update.message.reply_text("‚ùå –≠—Ç–∞ –Ω–æ–≤–æ—Å—Ç—å —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º.")
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ—Å—Ç—å
            favorites[str(user_id)].append(news_to_save)
            users_data['favorites'] = favorites
            self._save_data(self.users_file, users_data)
            
            await update.message.reply_text(f"‚úÖ –ù–æ–≤–æ—Å—Ç—å '{news_to_save['title'][:50]}...' —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ save: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏.")
    
    async def favorites_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /favorites."""
        try:
            user_id = update.effective_user.id
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏")
            
            users_data = self._load_data(self.users_file)
            logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_data}")
            
            favorites = users_data.get('favorites', {}).get(str(user_id), [])
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {len(favorites)}")
            
            if not favorites:
                await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /save <–Ω–æ–º–µ—Ä> –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π.")
                return
            
            await update.message.reply_text(f"‚ù§Ô∏è –í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ ({len(favorites)} —à—Ç.):")
            
            for i, news in enumerate(favorites, 1):
                try:
                    news_text = f"""
üì∞ **{i}. {news['title']}**

üìù {news['description']}

üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {news['category']}
üì∞ –ò—Å—Ç–æ—á–Ω–∏–∫: {news['source']}
üîó [–ß–∏—Ç–∞—Ç—å –¥–∞–ª–µ–µ]({news['url']})
                    """
                    
                    await update.message.reply_text(
                        news_text,
                        parse_mode='Markdown',
                        disable_web_page_preview=True
                    )
                    
                    await asyncio.sleep(0.5)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–æ–≤–æ—Å—Ç–∏ {i}: {e}")
                    continue
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ favorites: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π.")
    
    async def daily_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /daily."""
        try:
            user_id = update.effective_user.id
            users_data = self._load_data(self.users_file)
            subscribers = users_data.get('subscribers', [])
            
            if user_id in subscribers:
                # –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è
                subscribers.remove(user_id)
                users_data['subscribers'] = subscribers
                self._save_data(self.users_file, users_data)
                await update.message.reply_text("‚ùå –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π.")
            else:
                # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è
                subscribers.append(user_id)
                users_data['subscribers'] = subscribers
                self._save_data(self.users_file, users_data)
                await update.message.reply_text("‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É –Ω–æ–≤–æ—Å—Ç–µ–π!\n–ö–∞–∂–¥–æ–µ —É—Ç—Ä–æ –≤ 9:00 –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç —Å–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π.")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ daily: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–æ–π.")
    
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏."""
        query = update.callback_query
        await query.answer()
        
        try:
            if query.data.startswith('save_'):
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É
                parts = query.data.split('_')
                news_number = int(parts[1])
                user_id = update.effective_user.id
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                if len(parts) > 2 and parts[2] == 'filtered':
                    # –ù–æ–≤–æ—Å—Ç—å –∏–∑ –ø–æ–∏—Å–∫–∞ - –ø–æ–∫–∞ –Ω–µ –º–æ–∂–µ–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å, —Ç–∞–∫ –∫–∞–∫ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –ø–æ–∏—Å–∫–∞
                    await query.edit_message_text(
                        query.message.text + "\n\n‚ùå –î–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ –ø–æ–∏—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /save",
                        parse_mode='Markdown'
                    )
                elif len(parts) > 2 and parts[2] == 'category':
                    # –ù–æ–≤–æ—Å—Ç—å –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ - –ø–æ–∫–∞ –Ω–µ –º–æ–∂–µ–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å, —Ç–∞–∫ –∫–∞–∫ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                    await query.edit_message_text(
                        query.message.text + "\n\n‚ùå –î–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /save",
                        parse_mode='Markdown'
                    )
                else:
                    # –û–±—ã—á–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å –∏–∑ /news
                    news_data = self._load_data(self.news_file)
                    news_list = news_data.get('news', [])
                    
                    if news_number <= len(news_list):
                        users_data = self._load_data(self.users_file)
                        favorites = users_data.get('favorites', {})
                        
                        if str(user_id) not in favorites:
                            favorites[str(user_id)] = []
                        
                        news_to_save = news_list[news_number - 1]
                        if not any(saved['title'] == news_to_save['title'] for saved in favorites[str(user_id)]):
                            favorites[str(user_id)].append(news_to_save)
                            users_data['favorites'] = favorites
                            self._save_data(self.users_file, users_data)
                            
                            await query.edit_message_text(
                                query.message.text + "\n\n‚úÖ –ù–æ–≤–æ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!",
                                parse_mode='Markdown'
                            )
                        else:
                            await query.edit_message_text(
                                query.message.text + "\n\n‚ùå –≠—Ç–∞ –Ω–æ–≤–æ—Å—Ç—å —É–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º!",
                                parse_mode='Markdown'
                            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∫–Ω–æ–ø–æ–∫: {e}")
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏.")
    
    async def send_daily_digest(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º."""
        try:
            users_data = self._load_data(self.users_file)
            subscribers = users_data.get('subscribers', [])
            
            if not subscribers:
                logger.info("–ù–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏
            news_list = await self._update_news()
            
            if not news_list:
                logger.warning("–ù–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏")
                return
            
            digest_text = f"""
üåÖ **–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç –Ω–æ–≤–æ—Å—Ç–µ–π**

üì∞ –°–µ–≥–æ–¥–Ω—è —É –Ω–∞—Å {len(news_list)} —Å–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π:

"""
            
            for i, news in enumerate(news_list[:5], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-5 –Ω–æ–≤–æ—Å—Ç–µ–π
                digest_text += f"**{i}. {news['title']}**\n"
                digest_text += f"üìù {news['description'][:100]}...\n"
                digest_text += f"üè∑Ô∏è {news['category']} | üì∞ {news['source']}\n"
                digest_text += f"üîó [–ß–∏—Ç–∞—Ç—å –¥–∞–ª–µ–µ]({news['url']})\n\n"
            
            digest_text += "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /news –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –∏–ª–∏ /favorites –¥–ª—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ!"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–π–¥–∂–µ—Å—Ç –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
            for user_id in subscribers:
                try:
                    await context.bot.send_message(
                        chat_id=user_id,
                        text=digest_text,
                        parse_mode='Markdown',
                        disable_web_page_preview=True
                    )
                    logger.info(f"–î–∞–π–¥–∂–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞: {e}")
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
        try:
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            application = Application.builder().token(self.token).build()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
            application.add_handler(CommandHandler("start", self.start_command))
            application.add_handler(CommandHandler("help", self.help_command))
            application.add_handler(CommandHandler("news", self.news_command))
            application.add_handler(CommandHandler("category", self.category_command))
            application.add_handler(CommandHandler("filter", self.filter_command))
            application.add_handler(CommandHandler("save", self.save_command))
            application.add_handler(CommandHandler("favorites", self.favorites_command))
            application.add_handler(CommandHandler("daily", self.daily_command))
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
            application.add_handler(CallbackQueryHandler(self.button_callback))
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
            logger.info("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
            application.run_polling(allowed_updates=Update.ALL_TYPES)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
            raise
    
    async def run_async(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
        try:
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            application = Application.builder().token(self.token).build()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
            application.add_handler(CommandHandler("start", self.start_command))
            application.add_handler(CommandHandler("help", self.help_command))
            application.add_handler(CommandHandler("news", self.news_command))
            application.add_handler(CommandHandler("category", self.category_command))
            application.add_handler(CommandHandler("filter", self.filter_command))
            application.add_handler(CommandHandler("save", self.save_command))
            application.add_handler(CommandHandler("favorites", self.favorites_command))
            application.add_handler(CommandHandler("daily", self.daily_command))
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
            application.add_handler(CallbackQueryHandler(self.button_callback))
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
            logger.info("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
            await application.run_polling(allowed_updates=Update.ALL_TYPES)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
            raise

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    try:
        bot = NewsBot()
        bot.run()
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        print(f"–û—à–∏–±–∫–∞: {e}")

if __name__ == '__main__':
    main()

#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π Telegram-–±–æ—Ç –¥–ª—è –Ω–æ–≤–æ—Å—Ç–µ–π
"""

import os
import json
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackQueryHandler
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class SimpleNewsBot:
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –±–æ—Ç –¥–ª—è –Ω–æ–≤–æ—Å—Ç–µ–π."""
    
    def __init__(self):
        self.token = os.getenv('TELEGRAM_BOT_TOKEN')
        if not self.token:
            raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        
        self.data_dir = 'data'
        self.news_file = os.path.join(self.data_dir, 'news.json')
        self.users_file = os.path.join(self.data_dir, 'users.json')
    
    def _load_data(self, file_path: str):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON —Ñ–∞–π–ª–∞."""
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                return json.load(f)
        except (FileNotFoundError, json.JSONDecodeError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ {file_path}: {e}")
            return {}
    
    def _save_data(self, file_path: str, data):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ JSON —Ñ–∞–π–ª."""
        try:
            with open(file_path, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ {file_path}: {e}")
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
        user = update.effective_user
        welcome_text = f"""
–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã

–Ø –±–æ—Ç –¥–ª—è –Ω–æ–≤–æ—Å—Ç–µ–π. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:

üì∞ /news - –ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏
üîç /filter <—Å–ª–æ–≤–æ> - –ù–∞–π—Ç–∏ –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É
‚≠ê /save <–Ω–æ–º–µ—Ä> - –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
‚ù§Ô∏è /favorites - –ü–æ–∫–∞–∑–∞—Ç—å –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
üì¨ /daily - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É
‚ùì /help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É

–ù–∞—á–Ω–µ–º —Å –∫–æ–º–∞–Ω–¥—ã /news –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π!
        """
        await update.message.reply_text(welcome_text)
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help."""
        help_text = """
üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:

üì∞ /news - –ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –∑–∞ –¥–µ–Ω—å
üîç /filter <—Å–ª–æ–≤–æ> - –ù–∞–π—Ç–∏ –Ω–æ–≤–æ—Å—Ç–∏, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ —É–∫–∞–∑–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ
‚≠ê /save <–Ω–æ–º–µ—Ä> - –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
‚ù§Ô∏è /favorites - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
üì¨ /daily - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è/–æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
‚ùì /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–ü—Ä–∏–º–µ—Ä—ã:
/filter –ò–ò
/save 1
        """
        await update.message.reply_text(help_text)
    
    async def news_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /news."""
        try:
            await update.message.reply_text("üîÑ –ó–∞–≥—Ä—É–∂–∞—é —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏...")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ —Ñ–∞–π–ª–∞
            news_data = self._load_data(self.news_file)
            news_list = news_data.get('news', [])
            
            if not news_list:
                await update.message.reply_text("‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–æ–≤–æ—Å—Ç–∏ —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                return
            
            await update.message.reply_text(f"‚úÖ –í–æ—Ç {len(news_list)} —Å–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π:")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ—Ä—Ü–∏—è–º–∏
            for i, news in enumerate(news_list, 1):
                news_text = f"""
üì∞ **{i}. {news['title']}**

üìù {news['description']}

üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {news['category']}
üì∞ –ò—Å—Ç–æ—á–Ω–∏–∫: {news['source']}
üîó [–ß–∏—Ç–∞—Ç—å –¥–∞–ª–µ–µ]({news['url']})
                """
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                keyboard = [[InlineKeyboardButton(f"‚≠ê –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å #{i}", callback_data=f"save_{i}")]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await update.message.reply_text(
                    news_text, 
                    parse_mode='Markdown',
                    reply_markup=reply_markup,
                    disable_web_page_preview=True
                )
                
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                await asyncio.sleep(0.5)
            
            await update.message.reply_text("‚úÖ –í–æ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /save <–Ω–æ–º–µ—Ä> –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ news: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤–æ—Å—Ç–µ–π.")
    
    async def filter_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /filter."""
        try:
            if not context.args:
                await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞.\n–ü—Ä–∏–º–µ—Ä: /filter –ò–ò")
                return
            
            search_word = ' '.join(context.args).lower()
            await update.message.reply_text(f"üîç –ò—â—É –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ —Å–ª–æ–≤—É '{search_word}'...")
            
            news_data = self._load_data(self.news_file)
            news_list = news_data.get('news', [])
            
            filtered_news = []
            for news in news_list:
                if (search_word in news.get('title', '').lower() or 
                    search_word in news.get('description', '').lower()):
                    filtered_news.append(news)
            
            if not filtered_news:
                await update.message.reply_text(f"‚ùå –ù–æ–≤–æ—Å—Ç–∏ –ø–æ —Å–ª–æ–≤—É '{search_word}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                return
            
            await update.message.reply_text(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(filtered_news)} –Ω–æ–≤–æ—Å—Ç–µ–π:")
            
            for i, news in enumerate(filtered_news, 1):
                news_text = f"""
üì∞ **{i}. {news['title']}**

üìù {news['description']}

üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {news['category']}
üì∞ –ò—Å—Ç–æ—á–Ω–∏–∫: {news['source']}
üîó [–ß–∏—Ç–∞—Ç—å –¥–∞–ª–µ–µ]({news['url']})
                """
                
                keyboard = [[InlineKeyboardButton(f"‚≠ê –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data=f"save_filtered_{i}")]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await update.message.reply_text(
                    news_text,
                    parse_mode='Markdown',
                    reply_markup=reply_markup,
                    disable_web_page_preview=True
                )
                
                await asyncio.sleep(0.5)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ filter: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –Ω–æ–≤–æ—Å—Ç–µ–π.")
    
    async def save_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /save."""
        try:
            if not context.args:
                await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.\n–ü—Ä–∏–º–µ—Ä: /save 1")
                return
            
            try:
                news_number = int(context.args[0])
            except ValueError:
                await update.message.reply_text("‚ùå –ù–æ–º–µ—Ä –Ω–æ–≤–æ—Å—Ç–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
                return
            
            user_id = update.effective_user.id
            news_data = self._load_data(self.news_file)
            news_list = news_data.get('news', [])
            
            if news_number < 1 or news_number > len(news_list):
                await update.message.reply_text(f"‚ùå –ù–æ–≤–æ—Å—Ç–∏ —Å –Ω–æ–º–µ—Ä–æ–º {news_number} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
                return
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            users_data = self._load_data(self.users_file)
            favorites = users_data.get('favorites', {})
            
            if str(user_id) not in favorites:
                favorites[str(user_id)] = []
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –ª–∏ —É–∂–µ —ç—Ç–∞ –Ω–æ–≤–æ—Å—Ç—å
            news_to_save = news_list[news_number - 1]
            if any(saved['title'] == news_to_save['title'] for saved in favorites[str(user_id)]):
                await update.message.reply_text("‚ùå –≠—Ç–∞ –Ω–æ–≤–æ—Å—Ç—å —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º.")
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ—Å—Ç—å
            favorites[str(user_id)].append(news_to_save)
            users_data['favorites'] = favorites
            self._save_data(self.users_file, users_data)
            
            await update.message.reply_text(f"‚úÖ –ù–æ–≤–æ—Å—Ç—å '{news_to_save['title'][:50]}...' —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ save: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏.")
    
    async def favorites_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /favorites."""
        try:
            user_id = update.effective_user.id
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏")
            
            users_data = self._load_data(self.users_file)
            favorites = users_data.get('favorites', {}).get(str(user_id), [])
            
            if not favorites:
                await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /save <–Ω–æ–º–µ—Ä> –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π.")
                return
            
            await update.message.reply_text(f"‚ù§Ô∏è –í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ ({len(favorites)} —à—Ç.):")
            
            for i, news in enumerate(favorites, 1):
                news_text = f"""
üì∞ **{i}. {news['title']}**

üìù {news['description']}

üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {news['category']}
üì∞ –ò—Å—Ç–æ—á–Ω–∏–∫: {news['source']}
üîó [–ß–∏—Ç–∞—Ç—å –¥–∞–ª–µ–µ]({news['url']})
                """
                
                await update.message.reply_text(
                    news_text,
                    parse_mode='Markdown',
                    disable_web_page_preview=True
                )
                
                await asyncio.sleep(0.5)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ favorites: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π.")
    
    async def daily_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /daily."""
        try:
            user_id = update.effective_user.id
            users_data = self._load_data(self.users_file)
            subscribers = users_data.get('subscribers', [])
            
            if user_id in subscribers:
                # –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è
                subscribers.remove(user_id)
                users_data['subscribers'] = subscribers
                self._save_data(self.users_file, users_data)
                await update.message.reply_text("‚ùå –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π.")
            else:
                # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è
                subscribers.append(user_id)
                users_data['subscribers'] = subscribers
                self._save_data(self.users_file, users_data)
                await update.message.reply_text("‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É –Ω–æ–≤–æ—Å—Ç–µ–π!\n–ö–∞–∂–¥–æ–µ —É—Ç—Ä–æ –≤ 9:00 –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç —Å–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π.")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ daily: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–æ–π.")
    
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏."""
        query = update.callback_query
        await query.answer()
        
        try:
            if query.data.startswith('save_'):
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É
                news_number = int(query.data.split('_')[1])
                user_id = update.effective_user.id
                
                news_data = self._load_data(self.news_file)
                news_list = news_data.get('news', [])
                
                if news_number <= len(news_list):
                    users_data = self._load_data(self.users_file)
                    favorites = users_data.get('favorites', {})
                    
                    if str(user_id) not in favorites:
                        favorites[str(user_id)] = []
                    
                    news_to_save = news_list[news_number - 1]
                    if not any(saved['title'] == news_to_save['title'] for saved in favorites[str(user_id)]):
                        favorites[str(user_id)].append(news_to_save)
                        users_data['favorites'] = favorites
                        self._save_data(self.users_file, users_data)
                        
                        await query.edit_message_text(
                            query.message.text + "\n\n‚úÖ –ù–æ–≤–æ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!",
                            parse_mode='Markdown'
                        )
                    else:
                        await query.edit_message_text(
                            query.message.text + "\n\n‚ùå –≠—Ç–∞ –Ω–æ–≤–æ—Å—Ç—å —É–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º!",
                            parse_mode='Markdown'
                        )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∫–Ω–æ–ø–æ–∫: {e}")
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏.")
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
        try:
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            application = Application.builder().token(self.token).build()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
            application.add_handler(CommandHandler("start", self.start_command))
            application.add_handler(CommandHandler("help", self.help_command))
            application.add_handler(CommandHandler("news", self.news_command))
            application.add_handler(CommandHandler("filter", self.filter_command))
            application.add_handler(CommandHandler("save", self.save_command))
            application.add_handler(CommandHandler("favorites", self.favorites_command))
            application.add_handler(CommandHandler("daily", self.daily_command))
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
            application.add_handler(CallbackQueryHandler(self.button_callback))
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
            logger.info("–ó–∞–ø—É—Å–∫ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ Telegram –±–æ—Ç–∞...")
            application.run_polling(allowed_updates=Update.ALL_TYPES)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
            raise

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    try:
        bot = SimpleNewsBot()
        bot.run()
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        print(f"–û—à–∏–±–∫–∞: {e}")

if __name__ == '__main__':
    import asyncio
    main()


#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞–ø—Ä—è–º—É—é —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º NewsAPI
"""

import os
import json
import asyncio
import requests
from datetime import datetime, timedelta
from telegram import Bot
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

async def fetch_real_news():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π —Å NewsAPI."""
    api_key = os.getenv('NEWS_API_KEY')
    
    if not api_key:
        print("‚ùå NEWS_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return []
    
    news_list = []
    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        categories = ['technology', 'science', 'business', 'health', 'sports']
        
        for category in categories:
            url = "https://newsapi.org/v2/top-headlines"
            params = {
                'apiKey': api_key,
                'category': category,
                'country': 'us',
                'pageSize': 2
            }
            
            response = requests.get(url, params=params, timeout=15)
            response.raise_for_status()
            
            data = response.json()
            if data.get('status') == 'ok' and data.get('articles'):
                for article in data.get('articles', []):
                    if (article.get('title') and article.get('description') and 
                        article.get('url') and article['url'] != 'https://removed.com'):
                        news_list.append({
                            'title': article['title'],
                            'description': article['description'] or '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ',
                            'url': article['url'],
                            'source': article['source']['name'],
                            'category': category,
                            'published_at': article['publishedAt'],
                            'timestamp': datetime.now().isoformat()
                        })
        
        # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –º–∞–ª–æ –Ω–æ–≤–æ—Å—Ç–µ–π, –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–µ
        if len(news_list) < 5:
            url = "https://newsapi.org/v2/top-headlines"
            params = {
                'apiKey': api_key,
                'country': 'us',
                'pageSize': 5
            }
            
            response = requests.get(url, params=params, timeout=15)
            response.raise_for_status()
            
            data = response.json()
            if data.get('status') == 'ok' and data.get('articles'):
                for article in data.get('articles', []):
                    if (article.get('title') and article.get('description') and 
                        article.get('url') and article['url'] != 'https://removed.com'):
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–≤–æ—Å—Ç—å –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞
                        if not any(existing['title'] == article['title'] for existing in news_list):
                            news_list.append({
                                'title': article['title'],
                                'description': article['description'] or '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ',
                                'url': article['url'],
                                'source': article['source']['name'],
                                'category': 'general',
                                'published_at': article['publishedAt'],
                                'timestamp': datetime.now().isoformat()
                            })
                            
                            if len(news_list) >= 10:
                                break
        
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(news_list)} —Ä–µ–∞–ª—å–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π —Å NewsAPI")
        return news_list
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
        return []

async def send_news_to_user(user_id: int):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    try:
        token = os.getenv('TELEGRAM_BOT_TOKEN')
        if not token:
            print("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        bot = Bot(token=token)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
        news_list = await fetch_real_news()
        
        if not news_list:
            await bot.send_message(chat_id=user_id, text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ —Å NewsAPI")
            return
        
        await bot.send_message(chat_id=user_id, text=f"üåç –í–æ—Ç {len(news_list)} —Å–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤:")
        
        for i, news in enumerate(news_list, 1):
            news_text = f"""
üì∞ **{i}. {news['title']}**

üìù {news['description']}

üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {news['category']}
üì∞ –ò—Å—Ç–æ—á–Ω–∏–∫: {news['source']}
üîó [–ß–∏—Ç–∞—Ç—å –¥–∞–ª–µ–µ]({news['url']})
            """
            
            await bot.send_message(
                chat_id=user_id,
                text=news_text,
                parse_mode='Markdown',
                disable_web_page_preview=True
            )
            
            await asyncio.sleep(0.5)
        
        print("‚úÖ –†–µ–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

async def send_favorites_to_user(user_id: int):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    try:
        token = os.getenv('TELEGRAM_BOT_TOKEN')
        if not token:
            print("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        bot = Bot(token=token)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
        with open('data/users.json', 'r', encoding='utf-8') as f:
            users_data = json.load(f)
        
        favorites = users_data.get('favorites', {}).get(str(user_id), [])
        
        if not favorites:
            await bot.send_message(chat_id=user_id, text="‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π")
            return
        
        await bot.send_message(chat_id=user_id, text=f"‚ù§Ô∏è –í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ ({len(favorites)} —à—Ç.):")
        
        for i, news in enumerate(favorites, 1):
            news_text = f"""
üì∞ **{i}. {news['title']}**

üìù {news['description']}

üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {news['category']}
üì∞ –ò—Å—Ç–æ—á–Ω–∏–∫: {news['source']}
üîó [–ß–∏—Ç–∞—Ç—å –¥–∞–ª–µ–µ]({news['url']})
            """
            
            await bot.send_message(
                chat_id=user_id,
                text=news_text,
                parse_mode='Markdown',
                disable_web_page_preview=True
            )
            
            await asyncio.sleep(0.5)
        
        print("‚úÖ –ò–∑–±—Ä–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    user_id = 5624684741  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ñ–∞–π–ª–∞ users.json
    
    print("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
    print("1. –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ —Å NewsAPI")
    print("2. –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏")
    
    choice = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1 –∏–ª–∏ 2): ")
    
    if choice == "1":
        await send_news_to_user(user_id)
    elif choice == "2":
        await send_favorites_to_user(user_id)
    else:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")

if __name__ == '__main__':
    asyncio.run(main())

